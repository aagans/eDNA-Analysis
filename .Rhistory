load("C:/Users/Aale/Documents/GitHub/eDNA-Analysis/Eco.clustering.RData")
source("~/GitHub/eDNA-Analysis/Scripts/pkgloader.R")
remotes::install_github("hallucigenia-sparsa/seqgroup")
source("~/GitHub/eDNA-Analysis/Scripts/globalInit.R")
source("~/GitHub/eDNA-Analysis/Scripts/InitialProc.R")
source("~/GitHub/eDNA-Analysis/Scripts/InitialProc.R")
install.packages("future.apply")
library(future.apply)
plan(multisession)
ordered_count_log_fix_matrix <- data.matrix(ordered_count_log_fix)
rev_matrix <- t(ordered_count_log_fix_matrix)
rev_matrix_abr <- t(abr_matrix)
abr_log_matrix <- data.matrix(abr_count_data_log10_fix)
rev_abr_log <- t(abr_log_matrix)
fit <- future_lapply(1:9, dmn, count=rev_matrix, verbose = TRUE)
lplc <- base::sapply(fit, DirichletMultinomial::laplace)
aic  <- base::sapply(fit, DirichletMultinomial::AIC)
bic  <- base::sapply(fit, DirichletMultinomial::BIC)
plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
lines(aic, type="b", lty = 2)
lines(bic, type="b", lty = 3)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
install.packages("reshape2")
library(reshape2)
lplc <- base::sapply(fit, DirichletMultinomial::laplace)
aic  <- base::sapply(fit, DirichletMultinomial::AIC)
bic  <- base::sapply(fit, DirichletMultinomial::BIC)
plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
lines(aic, type="b", lty = 2)
lines(bic, type="b", lty = 3)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
lplc <- base::sapply(fit, DirichletMultinomial::laplace)
aic  <- base::sapply(fit, DirichletMultinomial::AIC)
bic  <- base::sapply(fit, DirichletMultinomial::BIC)
plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
lines(aic, type="b", lty = 2)
lines(bic, type="b", lty = 3)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
lplc <- base::sapply(fit, DirichletMultinomial::laplace)
aic  <- base::sapply(fit, DirichletMultinomial::AIC)
bic  <- base::sapply(fit, DirichletMultinomial::BIC)
plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
lines(aic, type="b", lty = 2)
lines(bic, type="b", lty = 3)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
View(best)
best@group
View(fit)
fit[[5]]@group
View(ordered_count_log_fix_matrix)
View(ordered_count)
View(ordered_count_matrix)
View(ordered_count)
plan(multisession)
ordered_count_log_fix_matrix <- data.matrix(ordered_count_log_fix)
rev_matrix <- t(ordered_count_log_fix_matrix)
rev_matrix_count <- t(as.matrix(ordered_count_matrix))
rev_matrix_abr <- t(abr_matrix)
abr_log_matrix <- data.matrix(abr_count_data_log10_fix)
rev_abr_log <- t(abr_log_matrix)
fit <- future_lapply(1:9, dmn, count=rev_matrix_count, verbose = TRUE)
lplc <- base::sapply(fit, DirichletMultinomial::laplace)
aic  <- base::sapply(fit, DirichletMultinomial::AIC)
bic  <- base::sapply(fit, DirichletMultinomial::BIC)
plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
lines(aic, type="b", lty = 2)
lines(bic, type="b", lty = 3)
best <- fit[[which.min(unlist(lplc))]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
fitAb <- future_lapply(1:20, dmn, count=t(abr_matrix), verbose = TRUE)
fitAb <- future_lapply(1:9, dmn, count=t(abr_matrix), verbose = TRUE)
lplcAb <- base::sapply(fitAb, DirichletMultinomial::laplace)
aicAb  <- base::sapply(fitAb, DirichletMultinomial::AIC)
bicAb  <- base::sapply(fitAb, DirichletMultinomial::BIC)
plot(lplcAb, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
lines(aicAb, type="b", lty = 2)
lines(bicAb, type="b", lty = 3)
bestAb <- fit[Ab[which.min(unlist(lplcAb))]]
bestAb <- fitAb[[which.min(unlist(lplcAb))]]
mixturewt(bestAb)
assAb <- apply(mixture(bestAb), 1, which.max)
for (k in seq(ncol(fitted(bestAb)))) {
dAb <- melt(fitted(bestAb))
colnames(dAb) <- c("OTU", "cluster", "value")
dAb <- subset(dAb, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
pAb <- ggplot(dAb, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(pAb)
}
View(bestAb)
bestAb@group
